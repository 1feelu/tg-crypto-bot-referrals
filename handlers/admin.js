require('dotenv').config()
const { Markup } = require('telegraf')
const User = require('../models/User')

const ADMIN_ID = process.env.ADMIN_ID // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ADMIN_ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ .env

if (!ADMIN_ID) throw new Error('ADMIN_ID is not set in .env')

function isAdmin(ctx) {
	if (!ctx || !ctx.from || typeof ctx.from.id === 'undefined') {
		console.error('–û—à–∏–±–∫–∞: ctx –∏–ª–∏ ctx.from.id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.', ctx)
		return false
	}
	return String(ctx.from.id) === ADMIN_ID
}

function setupAdminHandlers(bot) {
	// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
	bot.command('admin', ctx => {
		if (!isAdmin(ctx)) {
			return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
		}

		const buttons = Markup.inlineKeyboard([
			[Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_users')],
			[Markup.button.callback('üí∏ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥', 'admin_withdrawals')],
			[Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_settings')],
		])

		ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', buttons)
	})

	// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	bot.action('admin_users', async ctx => {
		if (!isAdmin(ctx)) {
			return ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.', true)
		}

		const users = await User.find()
		if (users.length === 0) {
			return ctx.reply('üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
		}

		let response = 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n'
		users.forEach((user, index) => {
			response += `${index + 1}. ${user.username || '–ë–µ–∑ –Ω–∏–∫–∞'} (ID: ${
				user.userId
			})\n`
		})

		await ctx.reply(response)
		ctx.answerCbQuery()
	})

	bot.action('admin_withdrawals', ctx => {
		if (!isAdmin(ctx)) {
			return ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.', true)
		}
		ctx.reply('üí∏ –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥.')
		ctx.answerCbQuery()
	})

	bot.action('admin_settings', ctx => {
		if (!isAdmin(ctx)) {
			return ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.', true)
		}
		ctx.reply('‚öôÔ∏è –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.')
		ctx.answerCbQuery()
	})
}

async function listUsers(ctx) {
	if (!isAdmin(ctx)) {
		return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
	}

	const users = await User.find()
	if (users.length === 0) {
		return ctx.reply('üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
	}

	let response = 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n'
	users.forEach((user, index) => {
		response += `${index + 1}. ${user.username || '–ë–µ–∑ –Ω–∏–∫–∞'} (ID: ${
			user.userId
		})\n`
	})

	ctx.reply(response)
}

async function manageBalance(ctx) {
	if (!isAdmin(ctx)) {
		return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
	}

	const message = `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: \`12345678 50\` (–ø—Ä–∏–±–∞–≤–∏—Ç 50 LIR)\n–ü—Ä–∏–º–µ—Ä: \`12345678 -20\` (—É–±–∞–≤–∏—Ç 20 LIR)`
	return ctx.replyWithMarkdown(message)
}

async function updateBalance(ctx) {
	if (!isAdmin(ctx)) return

	const input = ctx.message.text.split(' ')
	if (input.length !== 2) {
		return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')
	}

	const [userId, amount] = input
	const numericAmount = Number(amount)

	if (isNaN(numericAmount)) {
		return ctx.reply('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
	}

	const user = await User.findOne({ userId })
	if (!user) {
		return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
	}

	user.balance += numericAmount
	await user.save()

	return ctx.reply(
		`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${
			user.username || '–ë–µ–∑ –Ω–∏–∫–∞'
		} (ID: ${userId}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance} LIR`
	)
}

async function massMessage(ctx) {
	if (!isAdmin(ctx)) {
		return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
	}

	const message = ctx.message.text.replace('/mass ', '').trim()
	if (!message) {
		return ctx.reply(
			'‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n`/mass –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`'
		)
	}

	const users = await User.find()

	let sent = 0
	let failed = 0

	for (const user of users) {
		try {
			await ctx.telegram.sendMessage(user.userId, message)
			sent++
			await new Promise(res => setTimeout(res, 50)) // –ó–∞–¥–µ—Ä–∂–∫–∞
		} catch (error) {
			failed++
			console.error(
				`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}:`,
				error.response?.description || error.message
			)
		}
	}

	return ctx.reply(
		`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failed}`
	)
}

module.exports = {
	setupAdminHandlers,
	isAdmin,
	manageBalance,
	updateBalance,
	massMessage,
}
